#!/usr/bin/env python

# --- Imports

# Standard library
import os
from pathlib import Path
import shutil
import sys
import subprocess

# External packages
from slugify import slugify
import typer

# --- Constants

# Command arguments and options
PROJECT_NAME_ARG = typer.Argument(..., help="Project name.")
ENABLE_JULIA_OPTION = typer.Option(False, "-j", "--enable-julia",
                                   help="Enable support for Julia.")
ENABLE_MODELS_OPTION = typer.Option(False, "-m", "--enable-models",
                                    help="Enable support for data science and "
                                         "machine learning models.")
QUIET_OPTION = typer.Option(False, "-q", "--quiet",
                            help="Display fewer status messages.")


# --- Utility functions

def _append_content(src_filename: Path, dst_filename: Path) -> None:
    """
    Append contents of `src_filename` to contents of `dst_filename`.

    Parameters
    ----------
    src_filename: name of file to append content to

    dst_filename: name of file to with content to append

    Return value
    ------------
    None
    """
    with open(dst_filename, "a") as dst_file:
        with open(src_filename, "r") as src_file:
            dst_file.write(src_file.read())


# --- Main function

def main(project_name: str = PROJECT_NAME_ARG,
         enable_julia: bool = ENABLE_JULIA_OPTION,
         enable_models: bool = ENABLE_MODELS_OPTION,
         quiet: bool = QUIET_OPTION) -> None:
    """
    Create a new, empty research project.
    """
    # --- Preparations

    cookiecutter_root_dir = os.path.dirname(os.path.dirname(__file__))
    customizations_dir = os.path.join(cookiecutter_root_dir, "customizations")

    # --- Create the base directory structure using "Data Science Cookiecutter"

    if not quiet:
        typer.echo("Creating base project directory...")

    cmd = ["cookiecutter",
           "-c", "v1",
           "https://github.com/drivendata/cookiecutter-data-science"
           ]
    project_repository_name = slugify(project_name, separator="-")
    input_data = "\n".join(["",
                            project_name,
                            project_repository_name,
                            "",
                            "",
                            "3",
                            "",
                            "",
                            "1"])
    process = subprocess.run(cmd,
                             input=input_data,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             text=True)

    try:
        process.check_returncode()
    except subprocess.CalledProcessError:
        error = process.stdout.split("Error:")
        typer.echo(f"Error: {error[-1].strip()}", err=True)
        raise typer.Abort()

    # --- Customize project directory

    if not quiet:
        typer.echo("Applying customizations...")

    # README.md
    dst_filename = os.path.join(project_repository_name, "README.md")
    if not enable_models:
        src_filename = os.path.join(customizations_dir, "README.md")
    else:
        src_filename = os.path.join(customizations_dir, "README-DS.md")

    shutil.copy2(src_filename, dst_filename)

    # bin/
    shutil.copytree(os.path.join(customizations_dir, "bin"),
                    os.path.join(project_repository_name, "bin"))

    # requirements.txt
    dst_filename = os.path.join(project_repository_name, "requirements.txt")
    src_filename = os.path.join(customizations_dir, "requirements.txt")
    _append_content(src_filename, dst_filename)

    # src/
    src_dir = os.path.join(customizations_dir, "src")
    for file_ in os.listdir(src_dir):
        shutil.copy2(os.path.join(src_dir, file_),
                     os.path.join(project_repository_name, "src"))

    # .envrc
    shutil.copy2(os.path.join(customizations_dir, "dot-envrc"),
                 os.path.join(project_repository_name, ".envrc"))

    # .gitattributes
    shutil.copy2(os.path.join(customizations_dir, "dot-gitattributes"),
                 os.path.join(project_repository_name, ".gitattributes"))

    # .gitignore
    dst_filename = os.path.join(project_repository_name, ".gitignore")
    src_filename = os.path.join(customizations_dir, "dot-gitignore")
    _append_content(src_filename, dst_filename)

    # .jupyter/
    shutil.copytree(os.path.join(customizations_dir, "dot-jupyter"),
                    os.path.join(project_repository_name, ".jupyter"))

    # Data science and machine learning customizations
    if not enable_models:
        # Remove `models` directory
        models_dir = os.path.join(project_repository_name, "models")
        os.remove(os.path.join(models_dir, ".gitkeep"))
        os.rmdir(models_dir)

        # Remove directories in `src` that are specific to data science and
        # machine learning
        src_dir = os.path.join(project_repository_name, "src")
        for dir_ in ("features", "models", "visualization"):
            subdir = os.path.join(src_dir, dir_)
            for file_ in os.listdir(subdir):
                os.remove(os.path.join(subdir, file_))
            os.rmdir(subdir)

    # Julia customizations
    if enable_julia:
        shutil.copy2(os.path.join(customizations_dir, "Project.toml"),
                     project_repository_name)


# --- Run CLI

if __name__ == "__main__":
    typer.run(main)
